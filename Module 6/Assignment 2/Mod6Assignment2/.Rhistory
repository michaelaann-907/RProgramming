coefficients(lm_model)
# Display summary of the regression model
summary(lm_model)
# Create new variable for gender
Insurance <- mutate(Insurance, gender = ifelse(sex == "female", 1, 0))
# Create new variable for gender
Insurance2 <- mutate(Insurance, gender = ifelse(sex == "female", 1, 0))
# Create new variable for gender
Insurance2 <- mutate(Insurance2, gender = ifelse(sex == "female", 1, 0))
# Create new variable for gender
insurance <- mutate(insurance, gender = ifelse(sex == "female", 1, 0))
# Create new variable for smoker
insurance <- mutate(insurance, smoker2 = ifelse(smoker == "yes", 1, 0))
# Perform multiple linear regression with all variables
lm_model_new <- lm(charges ~ age + bmi + children + gender + smoker2, data = Insurance)
# Perform multiple linear regression with all variables
lm_model_new <- lm(charges ~ age + bmi + children + gender + smoker2, data = insurance)
# Display coefficients
coefficients(lm_model_new)
# Display summary of the new regression model
summary(lm_model_new)
# Summary statistics
summary(RespiratoryExchangeSample)
# Extract data for Caffeine and Placebo groups
caffeine <- RespiratoryExchangeSample$Caffeine
placebo <- RespiratoryExchangeSample$Placebo
# Perform Welch's t-test
t_test_result <- t.test(caffeine, placebo)
# Print the result
t_test_result
# Summary statistics
summary(advertising)
# Summary statistics
summary(Advertising)
# Extract data for Group 1 (new ad) and Group 2 (old ad)
group1 <- Advertising$Group1
group2 <- Advertising$Group2
# Perform Student's t-test
t_test_result <- t.test(group1, group2)
# ANOVA 1: Trust across Argument
anova_trust <- aov(Trust ~ Argument, data = perceptions)
# ANOVA 1: Trust across Argument
anova_trust <- aov(Trust ~ Argument, data = Perceptions)
# ANOVA 2: Connectedness across Argument
anova_connectedness <- aov(Connectedness ~ Argument, data = Perceptions)
# ANOVA 3: Knowledge across Argument
anova_knowledge <- aov(Knowledge ~ Argument, data = Perceptions)
# Print ANOVA results
summary(anova_trust)
summary(anova_connectedness)
summary(anova_knowledge)
# Post-hoc analysis for ANOVA 1: Trust across Argument
tukey_trust <- TukeyHSD(anova_trust)
tukey_trust
# Post-hoc analysis for ANOVA 2: Connectedness across Argument
tukey_connectedness <- TukeyHSD(anova_connectedness)
tukey_connectedness
# Post-hoc analysis for ANOVA 3: Knowledge across Argument
tukey_knowledge <- TukeyHSD(anova_knowledge)
tukey_knowledge
# Load libraries
# Load datasets
RespiratoryExchangeSample <- read_excel("RespiratoryExchangeSample.xlsx")
# Load libraries
library(readxl)
library(readr)
# Load datasets
RespiratoryExchangeSample <- read_excel("RespiratoryExchangeSample.xlsx")
Advertising <- read_csv("Advertising.csv")
insurance <- read_csv("insurance.csv")
Perceptions <- read_excel("Perceptions.xlsx")
# Load libraries
library(readxl)
library(readr)
# Load datasets
RespiratoryExchangeSample <- read_excel("RespiratoryExchangeSample.xlsx")
Advertising <- read_csv("Advertising.csv")
insurance <- read_csv("insurance.csv")
Perceptions <- read_excel("Perceptions.xlsx")
library(tidyverse)
library(corrplot)
library(dplyr)
library(RColorBrewer)
# using dataset
insurance <- read.csv("insurance.csv")
# Creating Insurance2 dataset with selected variables
insurance2 <- insurance %>%
select(age, bmi, children, charges)
# Create Insurance2 dataset with selected variables
insurance2 <- select(insurance, age, bmi, children, charges)
# Calculating correlation matrix
Corr_matrix <- cor(insurance2)
# Visualizing the correlation matrix
corrplot(Corr_matrix, type="upper", order="hclust",
col=brewer.pal(n=8, name="RdYlBu"))
# Regression Analysis
# Perform multiple linear regression
lm_model <- lm(charges ~ age + bmi + children, data = insurance2)
# Display coefficients
coefficients(lm_model)
# Display summary of the regression model
summary(lm_model)
# Regression Analysis
# Perform multiple linear regression
lm_model <- lm(charges ~ age + bmi + children, data = insurance2)
# Display coefficients
coefficients(lm_model)
# Display summary of the regression model
# summary(lm_model)
# Regression Analysis
# Perform multiple linear regression
lm_model <- lm(charges ~ age + bmi + children, data = insurance2)
# Display coefficients
coefficients(lm_model)
# Display summary of the regression model
summary(lm_model)
# Create new variable for gender
insurance <- mutate(insurance, gender = ifelse(sex == "female", 1, 0))
# Create new variable for smoker
insurance <- mutate(insurance, smoker2 = ifelse(smoker == "yes", 1, 0))
# Create new variable for gender
insurance <- mutate(insurance, gender = ifelse(sex == "female", 1, 0))
# Create new variable for smoker
insurance <- mutate(insurance, smoker2 = ifelse(smoker == "yes", 1, 0))
# Running regression with additional variables
lm_results <- lm(charges ~ age + bmi + children + gender + smoker2, data = Insurance)
# Create new variable for gender
insurance <- mutate(insurance, gender = ifelse(sex == "female", 1, 0))
# Create new variable for smoker
insurance <- mutate(insurance, smoker2 = ifelse(smoker == "yes", 1, 0))
# Running regression with additional variables
lm_results <- lm(charges ~ age + bmi + children + gender + smoker2, data = insurance)
summary(lm_results)
library(dplyr)
# Summary statistics
summary(respiratory_data)
# Load libraries
library(readxl)
library(readr)
# Load datasets
Respiratory <- read_excel("RespiratoryExchangeSample.xlsx")
Advertising <- read_csv("Advertising.csv")
insurance <- read_csv("insurance.csv")
Perceptions <- read_excel("Perceptions.xlsx")
library(dplyr)
# Summary statistics
summary(Respiratory)
# Separate data into caffeine and placebo groups
caffeine_group <- Respiratory$Caffeine
placebo_group <- Respiratory$Placebo
# Perform Welch t-test
t_test_result <- t.test(caffeine_group, placebo_group)
t_test_result
# Summary statistics
summary(Advertising)
# Extract data
new_ad_group <- Advertising$New_Ad
old_ad_group <- Advertising$Old_Ad
# Perform Student's t-test
t_test_result <- t.test(new_ad_group, old_ad_group, var.equal= TRUE)
# Summary statistics
summary(Advertising)
# Extract data
new_ad_group <- Advertising$New_Ad
old_ad_group <- Advertising$Old_Ad
# Perform Student's t-test
t_test_result <- t.test(new_ad_group, old_ad_group, var.Equal=TRUE)
library(dplyr)
# Summary statistics
summary(Advertising)
# Extract data
new_ad_group <- Advertising$New_Ad
old_ad_group <- Advertising$Old_Ad
# Perform Student's t-test
t_test_result <- t.test(new_ad_group, old_ad_group, var.Equal=TRUE)
Avertising <- read.csv("Advertising.csv")
# Summary statistics
summary(Advertising)
# Extract data
new_ad_group <- Advertising$New_Ad
old_ad_group <- Advertising$Old_Ad
# Perform Student's t-test
t_test_result <- t.test(new_ad_group, old_ad_group, var.Equal=TRUE)
# Load required packages
library(dplyr)
# Summary statistics
summary(Advertising)
# Separate data into new ad and old ad groups
new_ad_group <- Advertising$New_Ad
old_ad_group <- Advertising$Old_Ad
# Perform Student's t-test
t_test_result <- t.test(new_ad_group, old_ad_group, var.equal = TRUE)
# ANOVA 1: Trust across Argument
anova_trust <- aov(Trust ~ Argument, data = Perceptions)
summary(anova_trust)
# ANOVA 2: Connectedness across Argument
anova_connectedness <- aov(Connectedness ~ Argument, data = Perceptions)
summary(anova_connectedness)
# ANOVA 3: Knowledge across Argument
anova_knowledge <- aov(Knowledge ~ Argument, data = Perceptions)
summary(anova_knowledge)
tukey_trust <- TukeyHSD(anova_trust)
tukey_connectedness <- TukeyHSD(anova_connectedness)
tukey_trust <- TukeyHSD(anova_trust)
tukey_connectedness <- TukeyHSD(anova_connectedness)
tukey_trust <- TukeyHSD(anova_trust)
tukey_connectedness <- TukeyHSD(anova_connectedness)
print(tukey_trust)
print(tukey_connectedness)
# Summary statistics
summary(Advertising)
# Separate data into new ad and old ad groups
new_ad_group <- Advertising$New_Ad
old_ad_group <- Advertising$Old_Ad
# Check for missing values
missing_values <- sum(is.na(Advertising$New_Ad)) + sum(is.na(Advertising$Old_Ad))
print(paste("Number of missing values:", missing_values))
# Check the number of observations in each group
print(paste("Number of observations in new ad group:", length(new_ad_group)))
print(paste("Number of observations in old ad group:", length(old_ad_group)))
# Perform Student's t-test
t_test_result <- t.test(new_ad_group, old_ad_group, var.equal = TRUE)
# Summary statistics
summary(Advertising)
# Separate data into new ad and old ad groups
new_ad_group <- Advertising$New_Ad
old_ad_group <- Advertising$Old_Ad
# Print the length of the new ad group
print(paste("Number of observations in new ad group:", length(new_ad_group)))
# Perform Student's t-test
t_test_result <- t.test(new_ad_group, old_ad_group, var.equal = TRUE)
# Summary statistics
summary(Advertising)
# Separate data into new ad and old ad groups
new_ad_group <- Advertising$New_Ad
old_ad_group <- Advertising$Old_Ad
# Check for missing values in the new ad group
if (any(is.na(new_ad_group))) {
print("Warning: There are missing values in the new ad group.")
}
# Check for missing values in the old ad group
if (any(is.na(old_ad_group))) {
print("Warning: There are missing values in the old ad group.")
}
# Perform t-test only if both groups contain valid data
if (!is.null(new_ad_group) && !is.null(old_ad_group) && length(new_ad_group) > 0 && length(old_ad_group) > 0) {
# Perform Student's t-test
t_test_result <- t.test(new_ad_group, old_ad_group, var.equal = TRUE)
print(t_test_result)
} else {
print("Error: One or both groups have no valid data.")
}
colnames(Advertising)
colnames(Advertising)
# Check the column names of the Advertising dataset
colnames(Advertising)
# Separate data into new ad and old ad groups
new_ad_group <- Advertising$Rating[Advertising$Group == "New"]
old_ad_group <- Advertising$Rating[Advertising$Group == "Old"]
# Check for missing values in the new ad group
if (any(is.na(new_ad_group))) {
print("Warning: There are missing values in the new ad group.")
}
# Check for missing values in the old ad group
if (any(is.na(old_ad_group))) {
print("Warning: There are missing values in the old ad group.")
}
# Perform t-test only if both groups contain valid data
if (length(new_ad_group) > 0 && length(old_ad_group) > 0) {
# Perform Student's t-test
t_test_result <- t.test(new_ad_group, old_ad_group, var.equal = TRUE)
print(t_test_result)
} else {
print("Error: One or both groups have no valid data.")
}
colnames(Advertising)
# Check the column names of the Advertising dataset
colnames(Advertising)
# Separate data into new ad and old ad groups
new_ad_group <- Advertising$Rating[Advertising$Group == "New"]
old_ad_group <- Advertising$Rating[Advertising$Group == "Old"]
# Check for missing values in the new ad group
if (any(is.na(new_ad_group))) {
print("Warning: There are missing values in the new ad group.")
}
# Check for missing values in the old ad group
if (any(is.na(old_ad_group))) {
print("Warning: There are missing values in the old ad group.")
}
# Perform t-test only if both groups contain valid data
if (length(new_ad_group) > 0 && length(old_ad_group) > 0) {
# Perform Student's t-test
t_test_result <- t.test(new_ad_group, old_ad_group, var.equal = TRUE)
print(t_test_result)
} else {
print("Error: One or both groups have no valid data.")
}
# Print unique values in the "Group" column
unique_groups <- unique(Advertising$Group)
print(unique_groups)
head(Advertising)
# Separate data into new ad and old ad groups based on numeric values in the "Group" column
new_ad_group <- Advertising$Rating[Advertising$Group == 1]
old_ad_group <- Advertising$Rating[Advertising$Group == 2]
# Check for missing values in the new ad group
if (any(is.na(new_ad_group))) {
print("Warning: There are missing values in the new ad group.")
}
# Check for missing values in the old ad group
if (any(is.na(old_ad_group))) {
print("Warning: There are missing values in the old ad group.")
}
# Perform t-test only if both groups contain valid data
if (length(new_ad_group) > 0 && length(old_ad_group) > 0) {
# Perform Student's t-test
t_test_result <- t.test(new_ad_group, old_ad_group, var.equal = TRUE)
print(t_test_result)
} else {
print("Error: One or both groups have no valid data.")
}
# Summary statistics
summary(Advertising)
# Separate data into new ad and old ad groups
new_ad_group <- Advertising$Rating[Advertising$Group == 1]
old_ad_group <- Advertising$Rating[Advertising$Group == 2]
# Check for missing values in the new ad group
if (any(is.na(new_ad_group))) {
print("Warning: There are missing values in the new ad group.")
}
# Check for missing values in the old ad group
if (any(is.na(old_ad_group))) {
print("Warning: There are missing values in the old ad group.")
}
# Perform t-test only if both groups contain valid data
if (length(new_ad_group) > 0 && length(old_ad_group) > 0) {
# Perform Student's t-test
t_test_result <- t.test(new_ad_group, old_ad_group, var.equal = TRUE)
print(t_test_result)
} else {
print("Error: One or both groups have no valid data.")
}
colnames(Advertising)
# Summary statistics
summary(Advertising)
# Separate data into new ad and old ad groups
new_ad_group <- Advertising$Rating[Advertising$Group == 1]
old_ad_group <- Advertising$Rating[Advertising$Group == 2]
# Perform Student's t-test
t_test_result <- t.test(new_ad_group, old_ad_group, var.equal = TRUE)
print(t_test_result)
library(corrplot)
library(RColorBrewer)
# Create insurance2 dataset with selected variables
insurance2 <- select(insurance, age, bmi, children, charges)
# Calculating correlation matrix
Corr_matrix <- cor(insurance2)
# Visualizing the correlation matrix
corrplot(Corr_matrix, type="upper", order="hclust",
col=brewer.pal(n=8, name="RdYlBu"))
library(corrplot)
library(RColorBrewer)
# Create new dataset insurance 2 with age, bmi, children, and charges
insurance2 <- insurance %>%
select(age, bmi, children, charges)
# Calculating correlation matrix
Corr_matrix <- cor(insurance2)
# Visualizing the correlation matrix
corrplot(Corr_matrix, type="upper", order="hclust",
col=brewer.pal(n=8, name="RdYlBu"))
# Load libraries
library(readxl)
library(readr)
# Load datasets
Respiratory <- read_excel("RespiratoryExchangeSample.xlsx")
Advertising <- read_csv("Advertising.csv")
insurance <- read_csv("insurance.csv")
Perceptions <- read_excel("Perceptions.xlsx")
library(corrplot)
library(RColorBrewer)
# Create new dataset insurance 2 with age, bmi, children, and charges
insurance2 <- insurance %>%
select(age, bmi, children, charges)
# Load libraries
library(readxl)
library(readr)
# Load datasets
Respiratory <- read_excel("RespiratoryExchangeSample.xlsx")
Advertising <- read_csv("Advertising.csv")
insurance <- read_csv("insurance.csv")
Perceptions <- read_excel("Perceptions.xlsx")
library(dplyr)
library(corrplot)
library(RColorBrewer)
# Create new dataset insurance 2 with age, bmi, children, and charges
insurance2 <- insurance %>%
select(age, bmi, children, charges)
# Calculating correlation matrix
Corr_matrix <- cor(insurance2)
# Visualizing the correlation matrix
corrplot(Corr_matrix, type="upper", order="hclust",
col=brewer.pal(n=8, name="RdYlBu"))
# Regression Analysis
# Perform multiple linear regression
lm_model <- lm(charges ~ age + bmi + children, data = insurance2)
# Display coefficients
coefficients(lm_model)
# Display summary of the regression model
summary(lm_model)
# Create new variable for gender
insurance <- mutate(insurance, gender = ifelse(sex == "female", 1, 0))
# Create new variable for smoker
insurance <- mutate(insurance, smoker2 = ifelse(smoker == "yes", 1, 0))
# Running regression with additional variables
lm_results <- lm(charges ~ age + bmi + children + gender + smoker2, data = insurance)
summary(lm_results)
library(dplyr)
# Summary statistics
summary(Respiratory)
# Separate data into caffeine and placebo groups
caffeine_group <- Respiratory$Caffeine
placebo_group <- Respiratory$Placebo
# Perform Welch t-test
t_test_result <- t.test(caffeine_group, placebo_group)
t_test_result
colnames(Advertising)
# Summary statistics
summary(Advertising)
# Separate data into new ad and old ad groups
new_ad_group <- Advertising$Rating[Advertising$Group == 1]
old_ad_group <- Advertising$Rating[Advertising$Group == 2]
# Perform Student's t-test
t_test_result <- t.test(new_ad_group, old_ad_group, var.equal = TRUE)
print(t_test_result)
# ANOVA 1: Trust across Argument
anova_trust <- aov(Trust ~ Argument, data = Perceptions)
summary(anova_trust)
# ANOVA 2: Connectedness across Argument
anova_connectedness <- aov(Connectedness ~ Argument, data = Perceptions)
summary(anova_connectedness)
# ANOVA 3: Knowledge across Argument
anova_knowledge <- aov(Knowledge ~ Argument, data = Perceptions)
summary(anova_knowledge)
#Using the two significant ANOVAS (1 & 2)
tukey_trust <- TukeyHSD(anova_trust)
tukey_connectedness <- TukeyHSD(anova_connectedness)
print(tukey_trust)
print(tukey_connectedness)
# Load libraries
library(readxl)
library(readr)
# Load datasets
Respiratory <- read_excel("RespiratoryExchangeSample.xlsx")
Advertising <- read_csv("Advertising.csv")
insurance <- read_csv("insurance.csv")
Perceptions <- read_excel("Perceptions.xlsx")
library(dplyr)
library(corrplot)
library(RColorBrewer)
# Create new dataset insurance 2 with age, bmi, children, and charges
insurance2 <- insurance %>%
select(age, bmi, children, charges)
# Calculating correlation matrix
Corr_matrix <- cor(insurance2)
# Visualizing the correlation matrix
corrplot(Corr_matrix, type="upper", order="hclust",
col=brewer.pal(n=8, name="RdYlBu"))
# Regression Analysis
# Perform multiple linear regression
lm_model <- lm(charges ~ age + bmi + children, data = insurance2)
# Display coefficients
coefficients(lm_model)
# Display summary of the regression model
summary(lm_model)
# Create new variable for gender
insurance <- mutate(insurance, gender = ifelse(sex == "female", 1, 0))
# Create new variable for smoker
insurance <- mutate(insurance, smoker2 = ifelse(smoker == "yes", 1, 0))
# Running regression with additional variables
lm_results <- lm(charges ~ age + bmi + children + gender + smoker2, data = insurance)
summary(lm_results)
library(dplyr)
# Summary statistics
summary(Respiratory)
# Separate data into caffeine and placebo groups
caffeine_group <- Respiratory$Caffeine
placebo_group <- Respiratory$Placebo
# Perform Welch t-test
t_test_result <- t.test(caffeine_group, placebo_group)
t_test_result
colnames(Advertising)
# Summary statistics
summary(Advertising)
# Separate data into new ad and old ad groups
new_ad_group <- Advertising$Rating[Advertising$Group == 1]
old_ad_group <- Advertising$Rating[Advertising$Group == 2]
# Perform Student's t-test
t_test_result <- t.test(new_ad_group, old_ad_group, var.equal = TRUE)
print(t_test_result)
# ANOVA 1: Trust across Argument
anova_trust <- aov(Trust ~ Argument, data = Perceptions)
summary(anova_trust)
# ANOVA 2: Connectedness across Argument
anova_connectedness <- aov(Connectedness ~ Argument, data = Perceptions)
summary(anova_connectedness)
# ANOVA 3: Knowledge across Argument
anova_knowledge <- aov(Knowledge ~ Argument, data = Perceptions)
summary(anova_knowledge)
#Using the two significant ANOVAS (1 & 2)
tukey_trust <- TukeyHSD(anova_trust)
tukey_connectedness <- TukeyHSD(anova_connectedness)
print(tukey_trust)
print(tukey_connectedness)
