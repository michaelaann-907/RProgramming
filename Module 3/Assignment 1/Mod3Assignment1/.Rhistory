library(tidyverse)
candy_data <- read_csv("candy_data.csv")
library(tidyverse)
candy_data <- read_csv("candy_data.csv")
candy_production <- read_csv("candy_production.csv")
# Scatterplot using ggplot2
ggplot(candy_data, aes(x = sugarpercent, y = pricepercent)) +
geom_point() +
labs(x = "Sugar Content (%)", y = "Price (%)", title = "Scatterplot of Sugar Content vs. Price")
# Scatterplot using ggplot2
ggplot(candy_data, aes(x = sugarpercent, y = pricepercent)) +
geom_point() +
# Scatterplot using ggplot2
ggplot(candy_data, aes(x = sugarpercent, y = pricepercent)) +
# Scatterplot using ggplot2
ggplot(candy_data, aes(x = sugarpercent, y = pricepercent)) +
# Create scatterplot
ggplot(candy_data, aes(x = sugarpercent, y = pricepercent)) +
geom_point() +
labs(title = "Visualization with Scatterplots (geom_point)")
library(tidyverse)
candy_data <- read_csv("candy_data.csv")
candy_production <- read_csv("candy_production.csv")
library(tidyverse)
candy_data <- read_csv("candy_data.csv")
candy_production <- read_csv("candy_production.csv")
# Create scatterplot
ggplot(candy_data, aes(x = sugarpercent, y = pricepercent)) +
geom_point() +
labs(title = "Visualization with Scatterplots (geom_point)")
# Create scatterplot
ggplot(candy_data, aes(x = sugarpercent, y = pricepercent)) +
geom_point() +
# Create scatterplot
ggplot(candy_data, aes(x = sugarpercent, y = pricepercent)) +
geom_point()
# Create scatterplot
ggplot(candy_data, aes(x = sugarpercent, y = pricepercent)) +
geom_point()+
geom_smooth(method = "lm") + # adds a fitted line
library(ggplot2)
# Create scatterplot
ggplot(candy_data, aes(x = sugarpercent, y = pricepercent)) +
geom_point()+
geom_smooth(method = "lm") + # adds a fitted line
# Create scatterplot
ggplot(candy_data, aes(x = sugarpercent, y = pricepercent)) +
geom_point()+
geom_smooth(method = "lm") # adds a fitted line
# Create scatterplot
ggplot(candy_data, aes(x = sugarpercent, y = pricepercent)) +
label= competitorname +
geom_point()+
geom_smooth(method = "lm") # adds a fitted line
# Create scatterplot
ggplot(candy_data, aes(x = sugarpercent, label= competitorname, y = pricepercent)) +
geom_point()+
geom_smooth(method = "lm") # adds a fitted line
# Create scatterplot
ggplot(candy_data, aes(x = sugarpercent, label= competitorname, y = pricepercent)) +
geom_point()+
geom_smooth(method = "lm") + # adds a fitted line
geom_smooth(method = "lm") + # adds a fitted line
geom_text() # and then add labels to the points
# Create scatterplot
ggplot(candy_data, aes(x = sugarpercent, label= competitorname, y = pricepercent)) +
geom_point()+
geom_smooth(method = "lm") + # adds a fitted line
geom_smooth(method = "lm") + # adds a fitted line
geom_text() # and then add labels to the points
geom_text(check_overlap = T,# automatically reduce overlap (deletes some labels)
vjust = "bottom", # adjust the vertical orientation
nudge_y = 0.01, # move the text up a bit so it doesn't touch the points
angle = 30,# tilt the text 30 degrees
size = 2 # make the text smaller (to reduce overlap more)
) # and then add labels to the points
# Create scatterplot
ggplot(candy_data, aes(x = sugarpercent, label= competitorname, y = pricepercent)) +
geom_point()+
geom_smooth(method = "lm") + # adds a fitted line
geom_smooth(method = "lm") + # adds a fitted line
geom_text(check_overlap = T,# automatically reduce overlap (deletes some labels)
vjust = "bottom", # adjust the vertical orientation
nudge_y = 0.01, # move the text up a bit so it doesn't touch the points
angle = 30,# tilt the text 30 degrees
size = 2 # make the text smaller (to reduce overlap more)
) # and then add labels to the points
geom_text() # and then add labels to the points
# Create scatterplot
ggplot(candy_data, aes(x = sugarpercent, label= competitorname, y = pricepercent)) +
geom_point()+
geom_smooth(method = "lm") + # adds a fitted line
geom_smooth(method = "lm") + # adds a fitted line
geom_text(check_overlap = T,# automatically reduce overlap (deletes some labels)
vjust = "bottom", # adjust the vertical orientation
nudge_y = 0.01, # move the text up a bit so it doesn't touch the points
angle = 30,# tilt the text 30 degrees
size = 2 # make the text smaller (to reduce overlap more)
) # and then add labels to the points
geom_text() # and then add labels to the points
labs(title = "Sugar by Price Scatterplot", # plot title
x = "Sugar content (percentile)", # x axis label
y = "Price (percentile)" # y axis label
)
# Create scatterplot
ggplot(candy_data, aes(x = sugarpercent, label= competitorname, y = pricepercent)) +
geom_point()+
geom_smooth(method = "lm") + # adds a fitted line
geom_smooth(method = "lm") + # adds a fitted line
labs(title = "Sugar by Price Scatterplot", # plot title
x = "Sugar content (percentile)", # x axis label
y = "Price (percentile)" # y axis label
)
geom_text(check_overlap = T,# automatically reduce overlap (deletes some labels)
vjust = "bottom", # adjust the vertical orientation
nudge_y = 0.01, # move the text up a bit so it doesn't touch the points
angle = 30,# tilt the text 30 degrees
size = 2 # make the text smaller (to reduce overlap more)
) # and then add labels to the points
geom_text() # and then add labels to the points
# Create scatterplot
ggplot(candy_data, aes(x = sugarpercent, label= competitorname, y = pricepercent)) +
geom_point()+
geom_smooth(method = "lm") + # adds a fitted line
geom_smooth(method = "lm") + # adds a fitted line
labs(title = "Sugar by Price Scatterplot", # plot title
x = "Sugar content (percentile)", # x axis label
y = "Price (percentile)" # y axis label
)
geom_text(check_overlap = T,# automatically reduce overlap (deletes some labels)
vjust = "bottom", # adjust the vertical orientation
nudge_y = 0.01, # move the text up a bit so it doesn't touch the points
angle = 30,# tilt the text 30 degrees
size = 2 # make the text smaller (to reduce overlap more)
) # and then add labels to the points
geom_text() # and then add labels to the points
# Create scatterplot
ggplot(candy_data, aes(x = sugarpercent, label= competitorname, y = pricepercent)) +
geom_point()+
geom_smooth(method = "lm") + # adds a fitted line
geom_smooth(method = "lm") + # adds a fitted line
labs(title = "Sugar by Price Scatterplot", # plot title
x = "Sugar content (percentile)", # x axis label
y = "Price (percentile)" # y axis label
) +
geom_text(check_overlap = T,# automatically reduce overlap (deletes some labels)
vjust = "bottom", # adjust the vertical orientation
nudge_y = 0.01, # move the text up a bit so it doesn't touch the points
angle = 30,# tilt the text 30 degrees
size = 2 # make the text smaller (to reduce overlap more)
) # and then add labels to the points
geom_text() # and then add labels to the points
# Find the index of the candy with the highest price
max_price_index <- which.max(candy_data$pricepercent)
# Find the index of the candy with the highest sugar content
max_sugar_index <- which.max(candy_data$sugarpercent)
# Print the candy with the highest price
cat("Candy with the highest price:", candy_data$competitorname[max_price_index], "\n")
cat("Price:", candy_data$pricepercent[max_price_index], "%\n")
# Print the candy with the highest sugar content
cat("Candy with the highest sugar content:", candy_data$competitorname[max_sugar_index], "\n")
cat("Sugar content:", candy_data$sugarpercent[max_sugar_index], "%\n")
# Find the index of the candy with the highest price
max_price_index <- which.max(candy_data$pricepercent)
# Find the index of the candy with the highest sugar content
max_sugar_index <- which.max(candy_data$sugarpercent)
# Print the candy with the highest price
cat("Candy with the highest price:", candy_data$competitorname[max_price_index], "\n")
cat("Price:", candy_data$pricepercent[max_price_index], "%\n")
# Print the candy with the highest sugar content
cat("Candy with the highest sugar content:", candy_data$competitorname[max_sugar_index], "\n")
cat("Sugar content:", candy_data$sugarpercent[max_sugar_index], "%\n")
# Find the index of the candy with the highest price
max_price_index <- which.max(candy_data$pricepercent)
# Find the index of the candy with the highest sugar content
max_sugar_index <- which.max(candy_data$sugarpercent)
# Find the index of the candy with the highest price among candies with the highest sugar content
max_price_highest_sugar_index <- which.max(candy_data$pricepercent[candy_data$sugarpercent == candy_data$sugarpercent[max_sugar_index]])
# Print the candy with the highest price and the most sugar
cat("Candy with the highest price and most sugar:", candy_data$competitorname[max_price_highest_sugar_index], "\n")
cat("Price:", candy_data$pricepercent[max_price_highest_sugar_index], "%\n")
cat("Sugar content:", candy_data$sugarpercent[max_price_highest_sugar_index], "%\n")
# Find the index of the candy with the highest price
max_price_index <- which.max(candy_data$pricepercent)
# Find the index of the candy with the highest sugar content
max_sugar_index <- which.max(candy_data$sugarpercent)
# Find the index of the candy with the highest price among candies with the highest sugar content
max_price_highest_sugar_index <- which.max(candy_data$pricepercent[candy_data$sugarpercent == candy_data$sugarpercent[max_sugar_index]])
# Print the candy with the highest price and the most sugar
cat("Candy with the highest price and most sugar:", candy_data$competitorname[max_price_highest_sugar_index], "\n")
cat("Price:", candy_data$pricepercent[max_price_highest_sugar_index], "%\n")
cat("Sugar content:", candy_data$sugarpercent[max_price_highest_sugar_index], "%\n")
# Print the candy with the most sugar and lowest price
cat("Candy with the most sugar and lowest price:", candy_data$competitorname[max_sugar_index], "\n")
cat("Price:", candy_data$pricepercent[max_sugar_index], "%\n")
cat("Sugar content:", candy_data$sugarpercent[max_sugar_index], "%\n")
# Create a paragraph explaining the results
cat("\nBased on the analysis of the dataset, the candy with the most sugar and the lowest price is", candy_data$competitorname[max_sugar_index], "with a price of", candy_data$pricepercent[max_sugar_index], "% and a sugar content of", candy_data$sugarpercent[max_sugar_index], "%. On the other hand, the most expensive candy with the highest sugar content is", candy_data$competitorname[max_price_highest_sugar_index], "with a price of", candy_data$pricepercent[max_price_highest_sugar_index], "% and a sugar content of", candy_data$sugarpercent[max_price_highest_sugar_index], "%.")
# Find the index of the candy with the highest price
max_price_index <- which.max(candy_data$pricepercent)
# Find the index of the candy with the highest sugar content
max_sugar_index <- which.max(candy_data$sugarpercent)
# Find the index of the candy with the highest price among candies with the highest sugar content
max_price_highest_sugar_index <- which.max(candy_data$pricepercent[candy_data$sugarpercent == candy_data$sugarpercent[max_sugar_index]])
# Print the candy with the highest price and the most sugar
cat("Candy with the highest price and most sugar:", candy_data$competitorname[max_price_highest_sugar_index], "\n")
cat("Price:", candy_data$pricepercent[max_price_highest_sugar_index], "%\n")
cat("Sugar content:", candy_data$sugarpercent[max_price_highest_sugar_index], "%\n")
# Print the candy with the most sugar and lowest price
cat("Candy with the most sugar and lowest price:", candy_data$competitorname[max_sugar_index], "\n")
cat("Price:", candy_data$pricepercent[max_sugar_index], "%\n")
cat("Sugar content:", candy_data$sugarpercent[max_sugar_index], "%\n")
# Find the index of the candy with the most sugar
most_sugar_index <- which.max(candy_data$sugarpercent)
# Find the index of the candy with the least sugar
least_sugar_index <- which.min(candy_data$sugarpercent)
# Find the index of the candy with the lowest price
lowest_price_index <- which.min(candy_data$pricepercent)
# Find the index of the candy with the highest price
highest_price_index <- which.max(candy_data$pricepercent)
# Print the candies with the most and least sugar
cat("Candy with the most sugar:", candy_data$competitorname[most_sugar_index], "\n")
cat("Candy with the least sugar:", candy_data$competitorname[least_sugar_index], "\n")
# Print the candies with the lowest and highest price
cat("Candy with the lowest price:", candy_data$competitorname[lowest_price_index], "\n")
cat("Candy with the highest price:", candy_data$competitorname[highest_price_index], "\n")
# Create scatterplot
ggplot(candy_data, aes(x = sugarpercent, label= competitorname, y = pricepercent)) +
geom_point()+
geom_smooth(method = "lm") + # adds a fitted line
labs(title = "Sugar by Price Scatterplot", # plot title
x = "Sugar content (percentile)", # x axis label
y = "Price (percentile)" # y axis label
) +
geom_text(check_overlap = T,# automatically reduce overlap (deletes some labels)
vjust = "bottom", # adjust the vertical orientation
nudge_y = 0.01, # move the text up a bit so it doesn't touch the points
angle = 30,# tilt the text 30 degrees
size = 2 # make the text smaller (to reduce overlap more)
) # and then add labels to the points
geom_text() # and then add labels to the points
# Create line chart with fitted line
ggplot(candy_production, aes(x = observation_date, y = IPG3113N)) +
geom_line() +
geom_smooth() +
labs(title = "Monthly Candy Production",
x = "Year",
y = "As percent of 2012 production")
# Assuming candy_data is your dataset
# Create bar chart for chocolate variable
ggplot(candy_data, aes(x = chocolate)) +
geom_bar()
# Assuming candy_data is your dataset
# Create bar chart for chocolate variable
ggplot(candy_data, aes(x = chocolate)) +
geom_bar()
# select out the columns that have the features of the candy (chocolate, caramel, etc.)
candyFeatures <- candy_data %>% select(2:10)
# make sure that these are booleans (logical)
candyFeatures[] <- lapply(candyFeatures, as.logical)
# Assuming candy_data is your dataset
# Create bar chart for chocolate variable
ggplot(candy_data, aes(x = chocolate)) +
geom_bar()
# select out the columns that have the features of the candy (chocolate, caramel, etc.)
candyFeatures <- candy_data %>% select(2:10)
# make sure that these are booleans (logical)
candyFeatures[] <- lapply(candyFeatures, as.logical)
# Create bar chart for candyFeatures dataset
ggplot(candyFeatures, aes(x = chocolate)) +
geom_bar()
# Create scatterplot
ggplot(candy_data, aes(x = sugarpercent, label= competitorname, y = pricepercent)) +
geom_point()+
geom_smooth(method = "lm") + # adds a fitted line
labs(title = "Sugar by Price Scatterplot", # plot title
x = "Sugar content (percentile)", # x axis label
y = "Price (percentile)" # y axis label
) +
geom_text(check_overlap = T,# automatically reduce overlap (deletes some labels)
vjust = "bottom", # adjust the vertical orientation
nudge_y = 0.01, # move the text up a bit so it doesn't touch the points
angle = 30,# tilt the text 30 degrees
size = 2 # make the text smaller (to reduce overlap more)
) # and then add labels to the points
# Find the index of the candy with the highest price
max_price_index <- which.max(candy_data$pricepercent)
# Find the index of the candy with the highest sugar content
max_sugar_index <- which.max(candy_data$sugarpercent)
# Find the index of the candy with the highest price among candies with the highest sugar content
max_price_highest_sugar_index <- which.max(candy_data$pricepercent[candy_data$sugarpercent == candy_data$sugarpercent[max_sugar_index]])
# Print the candy with the highest price and the most sugar
cat("Candy with the highest price and most sugar:", candy_data$competitorname[max_price_highest_sugar_index], "\n")
cat("Price:", candy_data$pricepercent[max_price_highest_sugar_index], "%\n")
cat("Sugar content:", candy_data$sugarpercent[max_price_highest_sugar_index], "%\n")
# Print the candy with the most sugar and lowest price
cat("Candy with the most sugar and lowest price:", candy_data$competitorname[max_sugar_index], "\n")
cat("Price:", candy_data$pricepercent[max_sugar_index], "%\n")
cat("Sugar content:", candy_data$sugarpercent[max_sugar_index], "%\n")
# Find the index of the candy with the most sugar
most_sugar_index <- which.max(candy_data$sugarpercent)
# Find the index of the candy with the least sugar
least_sugar_index <- which.min(candy_data$sugarpercent)
# Find the index of the candy with the lowest price
lowest_price_index <- which.min(candy_data$pricepercent)
# Find the index of the candy with the highest price
highest_price_index <- which.max(candy_data$pricepercent)
# Print the candies with the most and least sugar
cat("Candy with the most sugar:", candy_data$competitorname[most_sugar_index], "\n")
cat("Candy with the least sugar:", candy_data$competitorname[least_sugar_index], "\n")
# Print the candies with the lowest and highest price
cat("Candy with the lowest price:", candy_data$competitorname[lowest_price_index], "\n")
cat("Candy with the highest price:", candy_data$competitorname[highest_price_index], "\n")
library(tidyverse)
candy_data <- read_csv("candy_data.csv")
candy_production <- read_csv("candy_production.csv")
# Create scatterplot (geom_point)
ggplot(candy_data, aes(x = sugarpercent, label= competitorname, y = pricepercent)) +
geom_point()+
geom_smooth(method = "lm") + # adds a fitted line
labs(title = "Sugar by Price Scatterplot", # plot title
x = "Sugar content (percentile)", # x axis label
y = "Price (percentile)" # y axis label
) +
geom_text(check_overlap = T,# automatically reduce overlap (deletes some labels)
vjust = "bottom", # adjust the vertical orientation
nudge_y = 0.01, # move the text up a bit so it doesn't touch the points
angle = 30,# tilt the text 30 degrees
size = 2 # make the text smaller (to reduce overlap more)
) # and then add labels to the points
# Create scatterplot (geom_point)
ggplot(candy_data, aes(x = sugarpercent, label= competitorname, y = pricepercent)) +
geom_point()+
geom_smooth(method = "lm") + # adds a fitted line
labs(title = "Sugar by Price Scatterplot", # plot title
x = "Sugar content (percentile)", # x axis label
y = "Price (percentile)" # y axis label
) +
geom_text(check_overlap = T,# automatically reduce overlap (deletes some labels)
vjust = "bottom", # adjust the vertical orientation
nudge_y = 0.01, # move the text up a bit so it doesn't touch the points
angle = 30,# tilt the text 30 degrees
size = 2 # make the text smaller (to reduce overlap more)
) # and then add labels to the points
library(tidyverse)
candy_data <- read_csv("candy_data.csv")
candy_production <- read_csv("candy_production.csv")
# Create scatterplot (geom_point)
ggplot(candy_data, aes(x = sugarpercent, label= competitorname, y = pricepercent)) +
geom_point()+
geom_smooth(method = "lm") + # adds a fitted line
labs(title = "Sugar by Price Scatterplot", # plot title
x = "Sugar content (percentile)", # x axis label
y = "Price (percentile)" # y axis label
) +
geom_text(check_overlap = T,# automatically reduce overlap (deletes some labels)
vjust = "bottom", # adjust the vertical orientation
nudge_y = 0.01, # move the text up a bit so it doesn't touch the points
angle = 30,# tilt the text 30 degrees
size = 2 # make the text smaller (to reduce overlap more)
) # and then add labels to the points
# Find the index of the candy with the highest price
max_price_index <- which.max(candy_data$pricepercent)
# Find the index of the candy with the highest sugar content
max_sugar_index <- which.max(candy_data$sugarpercent)
# Find the index of the candy with the highest price among candies with the highest sugar content
max_price_highest_sugar_index <- which.max(candy_data$pricepercent[candy_data$sugarpercent == candy_data$sugarpercent[max_sugar_index]])
# Print the candy with the highest price and the most sugar
cat("Candy with the highest price and most sugar:", candy_data$competitorname[max_price_highest_sugar_index], "\n")
cat("Price:", candy_data$pricepercent[max_price_highest_sugar_index], "%\n")
cat("Sugar content:", candy_data$sugarpercent[max_price_highest_sugar_index], "%\n")
# Print the candy with the most sugar and lowest price
cat("Candy with the most sugar and lowest price:", candy_data$competitorname[max_sugar_index], "\n")
cat("Price:", candy_data$pricepercent[max_sugar_index], "%\n")
cat("Sugar content:", candy_data$sugarpercent[max_sugar_index], "%\n")
# Find the index of the candy with the most sugar
most_sugar_index <- which.max(candy_data$sugarpercent)
# Find the index of the candy with the least sugar
least_sugar_index <- which.min(candy_data$sugarpercent)
# Find the index of the candy with the lowest price
lowest_price_index <- which.min(candy_data$pricepercent)
# Find the index of the candy with the highest price
highest_price_index <- which.max(candy_data$pricepercent)
# Print the candies with the most and least sugar
cat("Candy with the most sugar:", candy_data$competitorname[most_sugar_index], "\n")
cat("Candy with the least sugar:", candy_data$competitorname[least_sugar_index], "\n")
# Print the candies with the lowest and highest price
cat("Candy with the lowest price:", candy_data$competitorname[lowest_price_index], "\n")
cat("Candy with the highest price:", candy_data$competitorname[highest_price_index], "\n")
# Create line chart with fitted line
ggplot(candy_production, aes(x = observation_date, y = IPG3113N)) +
geom_line() +
geom_smooth() +
labs(title = "Monthly Candy Production",
x = "Year",
y = "As percent of 2012 production")
# Create bar chart for chocolate variable
ggplot(candy_data, aes(x = chocolate)) +
geom_bar()
# select out the columns that have the features of the candy (chocolate, caramel, etc.)
candyFeatures <- candy_data %>% select(2:10)
# make sure that these are booleans (logical)
candyFeatures[] <- lapply(candyFeatures, as.logical)
# Create bar chart for candyFeatures dataset
ggplot(candyFeatures, aes(x = chocolate)) +
geom_bar()
library(tidyverse)
candy_data <- read_csv("candy_data.csv")
candy_production <- read_csv("candy_production.csv")
